# file: main.py
import streamlit as st
import re
import os
import json
from dotenv import load_dotenv
from data_provider import UnitDataProvider
from prompt_generator import PromptGenerator
from llm_service import LLMService

load_dotenv()
st.set_page_config(layout="wide", page_title="Tr·ª£ l√Ω Gi√°o vi√™n AI")

@st.cache_resource
def load_services():
    api_key = os.getenv("GOOGLE_API_KEY")
    if not api_key:
        st.error("Kh√¥ng t√¨m th·∫•y GOOGLE_API_KEY. Vui l√≤ng ki·ªÉm tra file .env.")
        st.stop()
    data_provider = UnitDataProvider(data_folder='data')
    prompt_generator = PromptGenerator()
    llm_service = LLMService(api_key=api_key)
    return data_provider, prompt_generator, llm_service

try:
    data_provider, prompt_generator, llm_service = load_services()
except Exception as e:
    st.error(f"L·ªói kh·ªüi t·∫°o d·ªãch v·ª•: {e}")
    st.stop()

unit_names_list = [
    "Unit 1: Life Stories We Admire", "Unit 2: A Multicultural World", "Unit 3: Green Living",
    "Unit 4: Urbanisation", "Unit 5: The World of Work", "Unit 6: Artificial Intelligence",
    "Unit 7: The World of Mass Media", "Unit 8: Wildlife Conservation", "Unit 9: Career Paths",
    "Unit 10: Lifelong Learning"
]

st.title("‚ú® Tr·ª£ l√Ω Gi√°o vi√™n AI - Global Success ‚ú®")
st.markdown("Ch·ªâ c·∫ßn ch·ªçn Unit v√† Tr·ªçng t√¢m, AI s·∫Ω ƒë·ªÅ xu·∫•t c√°c k·∫ø ho·∫°ch ho·∫°t ƒë·ªông chi ti·∫øt v√† ƒë·∫ßy ƒë·ªß t√†i li·ªáu cho b·∫°n!")
st.divider()

st.header("B·∫Øt ƒë·∫ßu t·∫°o ho·∫°t ƒë·ªông")
col1, col2 = st.columns(2)

with col1:
    selected_unit_name = st.selectbox("**1. Ch·ªçn Unit:**", unit_names_list)
with col2:
    selected_focus = st.selectbox("**2. Ch·ªçn Tr·ªçng t√¢m:**", ["T·ª´ v·ª±ng", "Ng·ªØ ph√°p"])

st.write("")

if st.button("üöÄ S√°ng t·∫°o K·∫ø ho·∫°ch & T√†i li·ªáu!", type="primary", use_container_width=True):
    unit_number_match = re.search(r'Unit (\d+)', selected_unit_name)
    if not unit_number_match:
        st.error("L·ª±a ch·ªçn Unit kh√¥ng h·ª£p l·ªá.")
        st.stop()
    unit_number = int(unit_number_match.group(1))
    
    unit_data = data_provider.get_unit_data(unit_number)
    if unit_data is None:
        st.error(f"Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu cho Unit {unit_number}. Vui l√≤ng t·∫°o file 'unit_{unit_number}_data.csv' trong th∆∞ m·ª•c 'data'.")
        st.stop()
    
    final_prompt = prompt_generator.create_prompt(
        unit_name=selected_unit_name, unit_data=unit_data, focus_type=selected_focus
    )
    
    with st.spinner("ü§ñ AI ƒëang t∆∞ duy v√† c·∫•u tr√∫c d·ªØ li·ªáu..."):
        try:
            raw_response = llm_service.generate_lesson_plans(final_prompt)
            json_str = raw_response.strip().replace('```json', '').replace('```', '')
            response_data = json.loads(json_str)
            st.session_state['parsed_plans'] = response_data.get("plans", [])
            st.session_state['raw_response'] = raw_response
            st.balloons()
        except json.JSONDecodeError:
            st.error("L·ªói: AI ƒë√£ tr·∫£ v·ªÅ m·ªôt chu·ªói kh√¥ng ph·∫£i l√† JSON h·ª£p l·ªá.")
            st.warning("Hi·ªÉn th·ªã k·∫øt qu·∫£ th√¥ t·ª´ AI:")
            st.code(raw_response, language="text")
            st.session_state['parsed_plans'] = []
        except Exception as e:
            st.error(f"ƒê√£ c√≥ l·ªói x·∫£y ra: {e}")
            st.session_state.clear()

if 'parsed_plans' in st.session_state and st.session_state['parsed_plans']:
    st.header(f"‚ú® G·ª£i √Ω K·∫ø ho·∫°ch & T√†i li·ªáu Ho√†n ch·ªânh ‚ú®")
    
    parsed_plans = st.session_state['parsed_plans']
    icons = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£"]

    for i, plan in enumerate(parsed_plans):
        icon = icons[i] if i < len(icons) else "‚û°Ô∏è"
        with st.expander(f"**{icon} {plan.get('title', 'K·∫ø ho·∫°ch kh√¥ng t√™n')}**"):
            st.markdown(f"**üìù M√¥ t·∫£ ng·∫Øn:** {plan.get('description', 'N/A')}")
            st.markdown(f"**üéØ M·ª•c ti√™u:**\n{plan.get('objective', 'N/A')}")
            st.markdown(f"**‚è≥ Th·ªùi gian d·ª± ki·∫øn:** {plan.get('time', 'N/A')}")
            st.markdown("---")
            st.subheader("üõ†Ô∏è Chu·∫©n b·ªã & T√†i li·ªáu")
            col_gv, col_ai = st.columns(2)
            with col_gv:
                st.warning(f"**üë©‚Äçüè´ Gi√°o vi√™n c·∫ßn:**\n\n{plan.get('teacher_needs', 'N/A')}")
            with col_ai:
                st.info(f"**ü§ñ T√†i li·ªáu AI cung c·∫•p:**")
                st.markdown(plan.get('ai_materials', 'N/A'))
            st.markdown("---")
            st.subheader("üë£ C√°c b∆∞·ªõc th·ª±c hi·ªán")
            st.markdown(plan.get('steps', 'N/A'))
            st.markdown("---")
            st.subheader("‚öñÔ∏è Ph√¢n t√≠ch")
            st.markdown(plan.get('analysis', 'N/A'))

st.sidebar.header("Gi·ªõi thi·ªáu")
st.sidebar.info(
    "·ª®ng d·ª•ng ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ cung c·∫•p c√°c k·∫ø ho·∫°ch b√†i gi·∫£ng kh·∫£ thi, ƒë·∫ßy ƒë·ªß t√†i li·ªáu v√† d·ªÖ s·ª≠ d·ª•ng."
)
st.sidebar.success("T√°c gi·∫£: Gemini & B·∫°n")